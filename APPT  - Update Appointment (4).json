{
  "name": "APPT  - Update Appointment",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-appointment",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "866cf14a-8057-40c7-a8f3-22e28575bd9a",
      "name": "POST Update-Appointment - Webhook",
      "webhookId": "1a2f4b16-80e6-4db2-928d-5cea1ace6758"
    },
    {
      "parameters": {
        "jsCode": "// Validate appointment update request - v1.7.0\nconst requestBody = $json.body || $json;\nconst appointmentId = requestBody.id;\n\nconsole.log('Received update request for ID:', appointmentId);\nconsole.log('Full request body:', JSON.stringify(requestBody, null, 2));\n\n// Validate required fields\nif (!appointmentId || appointmentId.trim() === '') {\n    return [{\n        json: {\n            success: false,\n            error: 'Appointment ID is required'\n        }\n    }];\n}\n\n// Helper function to handle empty strings for integer fields\nfunction parseIntegerField(value) {\n    if (value === \"\" || value === null || value === undefined) {\n        return null;\n    }\n    const parsed = parseInt(value);\n    return isNaN(parsed) ? null : parsed;\n}\n\n// Helper function to handle empty strings for numeric fields\nfunction parseNumericField(value) {\n    if (value === \"\" || value === null || value === undefined) {\n        return null;\n    }\n    const parsed = parseFloat(value);\n    return isNaN(parsed) ? null : parsed;\n}\n\n// ✅ FIXED DROPOFF TIME CALCULATION\nfunction calculateDropOffTime(appointmentDateTime, appointmentLength, transitTime) {\n    if (!appointmentDateTime) return null;\n    \n    const appointmentDate = new Date(appointmentDateTime);\n    const lengthMinutes = appointmentLength || 120; // Default 120 minutes\n    const transitMinutes = transitTime || 0; // Default 0 minutes\n    \n    // dropOffTime = appointmenttime + appointmentLength + transitTime\n    const totalMinutes = lengthMinutes + transitMinutes;\n    const dropOffDate = new Date(appointmentDate.getTime() + (totalMinutes * 60000));\n    \n    console.log(`DropOff calculation: ${appointmentDateTime} + ${lengthMinutes}min (appointment) + ${transitMinutes}min (transit) = ${dropOffDate.toISOString()}`);\n    \n    return dropOffDate.toISOString();\n}\n\n// Determine if notes should go to scheduling_notes or notes field\n// If notes contain pickup/appointment time format, put in scheduling_notes\nconst notesValue = requestBody.notes || null;\nlet schedulingNotes = null;\nlet generalNotes = null;\n\nif (notesValue && notesValue.includes('pickup for') && notesValue.includes('appointment at')) {\n    // This looks like auto-generated scheduling notes\n    schedulingNotes = notesValue;\n} else {\n    // This is general notes\n    generalNotes = notesValue;\n}\n\n// ✅ CALCULATE DROPOFF TIME WITH TRANSIT TIME\nconst appointmentLength = parseIntegerField(requestBody.appointmentLength) || 120; // Default 120 minutes\nconst transitTime = parseIntegerField(requestBody.transitTime) || 0; // Default 0 minutes\nconst dropOffTime = calculateDropOffTime(requestBody.appointmentDateTime, appointmentLength, transitTime);\n\nconsole.log('Calculated dropOffTime:', dropOffTime);\nconsole.log('Appointment length:', appointmentLength);\nconsole.log('Transit time:', transitTime);\n\n// Prepare appointment data for Supabase update\nconst appointmentData = {\n    id: appointmentId,\n    appointmenttime: requestBody.appointmentDateTime,\n    pickuptime: requestBody.pickupTime,\n    dropOffTime: dropOffTime,  // ✅ CORRECTED CALCULATION\n    appointmentLength: appointmentLength,\n    transittime: transitTime,\n    locationname: requestBody.location || null,\n    locationaddress: requestBody.locationAddress || null,\n    appointmentstatus: requestBody.status || null,\n    driver_assigned: parseIntegerField(requestBody.driver_assigned),\n    notes: generalNotes,\n    scheduling_notes: schedulingNotes,\n    custom_rate: parseNumericField(requestBody.customRate)\n};\n\nconsole.log('Cleaned appointment data:', JSON.stringify(appointmentData, null, 2));\n\nreturn [{\n    json: {\n        appointmentData: appointmentData,\n        success: true,\n        appointmentId: appointmentId\n    }\n}];\n\n// Version: v1.7.0 - Fixed dropOffTime calculation to include transit time\n// - v1.6.0: Added appointmentLength field to appointmentData\n// - v1.5.0: Added dropOffTime calculation\n// - v1.4.0: Enhanced error handling for Supabase responses\n// - v1.3.0: Added scheduling_notes vs notes field logic\n// - v1.2.0: Added custom_rate field support\n// - "
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        0
      ],
      "id": "f499c3df-4d78-43d7-835d-fa2352335e00",
      "name": "Validate Input Data - Code"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "appointments",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.appointmentData.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "appointmenttime",
              "fieldValue": "={{ $json.appointmentData.appointmenttime }}"
            },
            {
              "fieldId": "pickuptime",
              "fieldValue": "={{ $json.appointmentData.pickuptime }}"
            },
            {
              "fieldId": "transittime",
              "fieldValue": "={{ $json.appointmentData.transittime }}"
            },
            {
              "fieldId": "locationname",
              "fieldValue": "= {{ $json.appointmentData.locationname }}"
            },
            {
              "fieldId": "locationaddress",
              "fieldValue": "={{ $json.appointmentData.locationaddress }}"
            },
            {
              "fieldId": "appointmentstatus",
              "fieldValue": "={{ $json.appointmentData.appointmentstatus }}"
            },
            {
              "fieldId": "driver_assigned",
              "fieldValue": "={{ $json.appointmentData.driver_assigned }}"
            },
            {
              "fieldId": "scheduling_notes",
              "fieldValue": "={{ $json.appointmentData.scheduling_notes }}"
            },
            {
              "fieldId": "custom_rate",
              "fieldValue": "={{ $json.appointmentData.custom_rate }}"
            },
            {
              "fieldId": "appointmentStatusUpdated",
              "fieldValue": "={{ new Date().toISOString() }}"
            },
            {
              "fieldId": "dropOffTime",
              "fieldValue": "={{ $json.appointmentData.dropOffTime }}"
            },
            {
              "fieldId": "this_appointment_length",
              "fieldValue": "={{ $json.appointmentData.appointmentLength }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        0
      ],
      "id": "c88ffd53-dbcb-4b5d-a776-c7f91cabe593",
      "name": "Update Appointment - Supabase",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "k2pl65iJIuBE5fj9",
          "name": "Supabase Service Role"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format success response for appointment update - v1.7.0\nconst appointmentUpdate = $input.first().json;\n\nconsole.log('Supabase update response:', JSON.stringify(appointmentUpdate, null, 2));\n\n// Check if the update was successful\nif (!appointmentUpdate || appointmentUpdate.error) {\n    console.error('Update failed:', appointmentUpdate?.error);\n    return [{\n        json: {\n            success: false,\n            message: 'Failed to update appointment',\n            error: appointmentUpdate?.error || 'Update returned no data',\n            updatedAt: new Date().toISOString()\n        }\n    }];\n}\n\n// Success case\nconsole.log('Update successful for appointment ID:', appointmentUpdate.id);\nreturn [{\n    json: {\n        success: true,\n        message: 'Appointment updated successfully',\n        appointmentId: appointmentUpdate.id,\n        updatedAt: new Date().toISOString(),\n        updatedFields: {\n            appointmenttime: appointmentUpdate.appointmenttime,\n            pickuptime: appointmentUpdate.pickuptime,\n            dropOffTime: appointmentUpdate.dropOffTime,\n            appointmentLength: appointmentUpdate.this_appointment_length,  // ✅ ADD THIS FIELD\n            status: appointmentUpdate.appointmentstatus,\n            location: appointmentUpdate.locationname,\n            locationAddress: appointmentUpdate.locationaddress,\n            transittime: appointmentUpdate.transittime,\n            driver_assigned: appointmentUpdate.driver_assigned,\n            custom_rate: appointmentUpdate.custom_rate,\n            notes: appointmentUpdate.notes,\n            scheduling_notes: appointmentUpdate.scheduling_notes\n        }\n    }\n}];\n\n// Version: v1.7.0 - Added appointmentLength to success response\n// - v1.6.0: Added dropOffTime to success response\n// - v1.5.0: Enhanced error handling and response formatting\n// - v1.4.0: Added custom_rate field to response\n// - v1.3.0: Added location and locationAddress fields\n// - v1.2.0: Added scheduling_notes field\n// - v1.1.0: Added driver_assigned field\n// - v1.0.0: Initial success response formatting"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        0
      ],
      "id": "ce7a1047-7c4b-486c-9dcf-c62f214b895e",
      "name": "Format Success Response - Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        832,
        0
      ],
      "id": "479f95bb-08ea-481f-8b85-310696618f80",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "POST Update-Appointment - Webhook": {
      "main": [
        [
          {
            "node": "Validate Input Data - Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input Data - Code": {
      "main": [
        [
          {
            "node": "Update Appointment - Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Appointment - Supabase": {
      "main": [
        [
          {
            "node": "Format Success Response - Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Response - Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2d1463c5-e0d7-4664-b54f-f206c0be95e9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "62fe1973b06b53c2a918f891d003328ecd43cc9389e3ac0f24384782e956f6ca"
  },
  "id": "jEv1wJrbcFsr4lNd",
  "tags": [
    {
      "createdAt": "2025-08-27T18:20:30.563Z",
      "updatedAt": "2025-08-27T18:20:30.563Z",
      "id": "J5OCr0g3hFvIP7Xh",
      "name": "Appointment Management"
    }
  ]
}