{
  "name": "RMDR - 1 Hour SMS Reminders",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "custom",
              "cronExpression": "*/5 10-23 * * *"
            }
          ]
        }
      },
      "id": "db45dcac-09d9-4c6d-824b-6830241d5214",
      "name": "Every 5 Min Business Hours",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -1984,
        144
      ],
      "notes": "Runs every 5 minutes from 10 AM-11 PM UTC (covers AST/ADT for 7 AM-7 PM Halifax)"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "app_config",
        "filters": {
          "conditions": [
            {
              "keyName": "key",
              "condition": "eq",
              "keyValue": "rrts_phone_id"
            },
            {
              "keyName": "key",
              "condition": "eq",
              "keyValue": "rrts_business_name"
            }
          ]
        }
      },
      "id": "af5b60ad-12aa-4e25-9cbc-64511eca586d",
      "name": "Get Config from DB",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1760,
        272
      ],
      "credentials": {
        "supabaseApi": {
          "id": "k2pl65iJIuBE5fj9",
          "name": "Supabase Service Role"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "appointments",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "reminder_sent_client",
              "condition": "eq",
              "keyValue": "false"
            },
            {
              "keyName": "appointmentstatus",
              "condition": "eq",
              "keyValue": "confirmed"
            },
            {
              "keyName": "appointmenttime",
              "condition": "gte",
              "keyValue": "={{ new Date().toISOString() }}"
            },
            {
              "keyName": "appointmenttime",
              "condition": "lte",
              "keyValue": "={{ new Date(Date.now() + 65*60*1000).toISOString() }}"
            }
          ]
        }
      },
      "id": "d206a485-49dc-42f6-a84a-6dab8953938c",
      "name": "Find 1-Hour Window Appointments",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1760,
        48
      ],
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "k2pl65iJIuBE5fj9",
          "name": "Supabase Service Role"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "clients",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "knumber",
              "condition": "eq",
              "keyValue": "={{ $json.knumber }}"
            },
            {
              "keyName": "active",
              "condition": "is",
              "keyValue": "true"
            }
          ]
        }
      },
      "id": "f67835c8-e2fa-4593-9c28-d6e72ebb3d68",
      "name": "Get Client Details",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1120,
        160
      ],
      "credentials": {
        "supabaseApi": {
          "id": "k2pl65iJIuBE5fj9",
          "name": "Supabase Service Role"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the combined data from previous node\nconst appointmentData = $json.appointment_data;\nconst clientData = $json.client_data;\n\n// Get business name from config (access via merge node)\nconst allMergedItems = $('Merge Config and Appointments').all();\nconst configItems = allMergedItems.filter(item => item.json.key);\nconst businessName = configItems.find(item => item.json.key === 'rrts_business_name')?.json.value || 'Rural Route Transportation Services';\n\n// Calculate exact time until appointment\nconst appointmentTime = new Date(appointmentData.appointmenttime);\nconst now = new Date();\nconst minutesUntil = Math.round((appointmentTime - now) / (1000 * 60));\n\n// Format appointment time for display (Halifax timezone)\nconst timeFormatter = new Intl.DateTimeFormat('en-CA', {\n  timeZone: 'America/Halifax',\n  hour: '2-digit',\n  minute: '2-digit',\n  hour12: true\n});\n\nconst dateFormatter = new Intl.DateTimeFormat('en-CA', {\n  timeZone: 'America/Halifax',\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric'\n});\n\nconst appointmentTimeStr = timeFormatter.format(appointmentTime);\nconst appointmentDateStr = dateFormatter.format(appointmentTime);\n\n// Format phone number to E.164\nlet phone = clientData.phone || '';\nphone = phone.replace(/\\D/g, ''); // Remove non-digits\nif (phone.length === 10) {\n  phone = '+1' + phone; // Add country code for 10-digit numbers\n} else if (phone.length === 11 && phone.startsWith('1')) {\n  phone = '+' + phone; // Add + to 11-digit numbers starting with 1\n} else if (!phone.startsWith('+')) {\n  phone = '+' + phone;\n}\n\n// Create personalized message\nconst message = `Hi ${clientData.firstname || 'there'},\n\nYour RRTS transportation is in approximately ${minutesUntil} minutes!\n\nPickup Details:\nüìÖ ${appointmentDateStr}\nüïê ${appointmentTimeStr}\nüìç ${appointmentData.locationaddress || appointmentData.locationname || 'Address on file'}\n\nOur driver will arrive shortly. Please be ready at your pickup location.\n\nReply HELP for assistance.\n\n${businessName}`;\n\nreturn {\n  appointment_id: appointmentData.id,\n  client_knumber: appointmentData.knumber,\n  client_name: `${clientData.firstname || ''} ${clientData.lastname || ''}`.trim(),\n  phone_formatted: phone,\n  message_content: message,\n  minutes_until: minutesUntil,\n  appointment_time: appointmentTimeStr,\n  appointment_date: appointmentDateStr\n};"
      },
      "id": "ef33455a-c8c3-4b41-acdc-085b6b4f13eb",
      "name": "Format SMS Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        48
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.phone_formatted }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            },
            {
              "leftValue": "={{ $json.phone_formatted.length }}",
              "rightValue": 10,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "242231c7-5f2b-40c8-b51b-d8c9d8a9ccbd",
      "name": "Valid Phone Number?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1360,
        48
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openphone.com/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"to\": [\"{{ $json.phone_formatted }}\"],\n  \"content\": \"{{ $json.message_content }}\",\n  \"from\": \"{{ $('Get Config from DB').all().find(item => item.json.key === 'rrts_phone_id').json.value }}\"\n}",
        "options": {}
      },
      "id": "f7d00610-5618-4900-b48a-b64bb4a8697b",
      "name": "Send OpenPhone SMS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1584,
        0
      ]
    },
    {
      "parameters": {
        "operation": "update"
      },
      "id": "0b0f0ca1-49f1-4421-8a01-19e7855064fa",
      "name": "Mark 1H Reminder Sent",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1808,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log successful SMS send\nconst data = $('Format SMS Message').item.json;\n\nconsole.log(`‚úÖ 1-hour reminder sent:`, {\n  appointment_id: data.appointment_id,\n  client: data.client_name,\n  phone: data.phone_formatted,\n  appointment_time: data.appointment_time,\n  minutes_until: data.minutes_until\n});\n\nreturn {\n  status: 'success',\n  appointment_id: data.appointment_id,\n  client_name: data.client_name,\n  phone: data.phone_formatted,\n  sent_at: new Date().toISOString(),\n  minutes_until_appointment: data.minutes_until\n};"
      },
      "id": "37227510-87f5-4ef5-a50e-3eadb179eb28",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log phone validation failure\nconst data = $('Format SMS Message').item.json;\n\nconsole.log(`‚ùå Invalid phone number:`, {\n  appointment_id: data.appointment_id,\n  client: data.client_name,\n  invalid_phone: data.phone_formatted\n});\n\nreturn {\n  status: 'phone_invalid',\n  appointment_id: data.appointment_id,\n  client_name: data.client_name,\n  invalid_phone: data.phone_formatted,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "e3c203a6-9b50-40c5-9585-75fc121c73b6",
      "name": "Log Phone Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1584,
        112
      ]
    },
    {
      "parameters": {
        "operation": "update"
      },
      "id": "da901a27-cba9-4078-aa77-43fa5a99cb3d",
      "name": "Mark Phone Error",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1808,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle OpenPhone API errors\nconst error = $input.first().json;\nconst data = $('Format SMS Message').item.json;\n\nconsole.log(`‚ùå OpenPhone API error:`, {\n  appointment_id: data.appointment_id,\n  client: data.client_name,\n  phone: data.phone_formatted,\n  error: error\n});\n\nreturn {\n  status: 'api_error',\n  appointment_id: data.appointment_id,\n  client_name: data.client_name,\n  phone: data.phone_formatted,\n  error_details: error,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "1427a03a-2f68-43b4-9a86-1fdfa59abc86",
      "name": "Handle API Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1584,
        208
      ]
    },
    {
      "parameters": {
        "operation": "update"
      },
      "id": "922adfe5-e631-46e6-b144-0cac2fe985e7",
      "name": "Log API Error to DB",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1808,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log when client not found in database\nconst appointmentData = $('Process Each Appointment').item.json;\n\nconsole.log(`‚ö†Ô∏è Client not found or inactive:`, {\n  appointment_id: appointmentData.id,\n  knumber: appointmentData.knumber,\n  appointment_time: appointmentData.appointmenttime\n});\n\nreturn {\n  status: 'client_not_found',\n  appointment_id: appointmentData.id,\n  knumber: appointmentData.knumber,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "b267221b-45ea-4d5e-9ba2-bae020cf01e2",
      "name": "Log Client Not Found",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -480,
        272
      ]
    },
    {
      "parameters": {
        "operation": "update"
      },
      "id": "2d8fad4b-cfe6-42d9-ab71-106c17d1b6eb",
      "name": "Mark Client Not Found",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -288,
        272
      ],
      "credentials": {
        "supabaseApi": {
          "id": "k2pl65iJIuBE5fj9",
          "name": "Supabase Service Role"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1536,
        160
      ],
      "id": "96d022ac-bc77-40f1-b849-af590bc5f2b5",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items from the merge\nconst allItems = $input.all();\n\n// Filter to find appointment items (they have 'appointmenttime' field)\nconst appointments = allItems.filter(item => item.json.appointmenttime);\n\n// Check if we have any appointments\nif (appointments.length === 0) {\n  console.log('‚è∞ No appointments found in 1-hour window - stopping workflow');\n  // Return empty array to stop workflow execution\n  return [];\n}\n\n// Additional check: make sure appointments array isn't just empty objects\nconst validAppointments = appointments.filter(item => \n  item.json.appointmenttime && \n  item.json.id && \n  item.json.knumber\n);\n\nif (validAppointments.length === 0) {\n  console.log('‚è∞ No valid appointments found in 1-hour window - stopping workflow');\n  return [];\n}\n\nconsole.log(`üìã Found ${validAppointments.length} valid appointments needing 1-hour reminders`);\n\n// Return only the valid appointment items\nreturn validAppointments;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1328,
        160
      ],
      "id": "68a3afa9-67a7-4d66-b9e4-58b7322f68d9",
      "name": "Check Appointments Exist - Code"
    },
    {
      "parameters": {
        "jsCode": "// Get appointment data (from the current execution context)\nconst appointmentData = $json;\n\n// Get client data from the previous node\nconst clientResults = $input.all();\n\n// Check if client data was returned\nif (!clientResults || clientResults.length === 0) {\n  console.log(`‚ùå Client not found for knumber: ${appointmentData.knumber}`);\n  \n  return {\n    client_status: 'not_found',\n    appointment_data: appointmentData,\n    error: 'Client not found or inactive'\n  };\n}\n\n// Client found - combine appointment and client data\nconst clientData = clientResults[0].json;\n\nreturn {\n  client_status: 'found',\n  appointment_data: appointmentData,\n  client_data: clientData\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -912,
        160
      ],
      "id": "fe904c62-577b-47c0-ac7e-2fe4e89c1df4",
      "name": "Client Found Check - Code"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.client_status }}",
                    "rightValue": "found",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "c5ed89bc-d52d-4cab-8f60-63e942f86a26"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Found"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dc317a25-0ffc-4662-b1f7-099e99584f4f",
                    "leftValue": "={{ $json.client_status }}",
                    "rightValue": "not_found",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Not Found"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -704,
        160
      ],
      "id": "63266865-0d80-4649-9b32-b47c3c8aaf16",
      "name": "Client Route - Switch"
    }
  ],
  "pinData": {},
  "connections": {
    "Every 5 Min Business Hours": {
      "main": [
        [
          {
            "node": "Get Config from DB",
            "type": "main",
            "index": 0
          },
          {
            "node": "Find 1-Hour Window Appointments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Config from DB": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Find 1-Hour Window Appointments": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Client Details": {
      "main": [
        [
          {
            "node": "Client Found Check - Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format SMS Message": {
      "main": [
        [
          {
            "node": "Valid Phone Number?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Valid Phone Number?": {
      "main": [
        [
          {
            "node": "Send OpenPhone SMS",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Phone Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send OpenPhone SMS": {
      "main": [
        [
          {
            "node": "Mark 1H Reminder Sent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle API Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark 1H Reminder Sent": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Phone Error": {
      "main": [
        [
          {
            "node": "Mark Phone Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle API Error": {
      "main": [
        [
          {
            "node": "Log API Error to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Client Not Found": {
      "main": [
        [
          {
            "node": "Mark Client Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Check Appointments Exist - Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Appointments Exist - Code": {
      "main": [
        [
          {
            "node": "Get Client Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Client Found Check - Code": {
      "main": [
        [
          {
            "node": "Client Route - Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Client Route - Switch": {
      "main": [
        [
          {
            "node": "Format SMS Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Client Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "99677cc4-f6c1-49b6-b4f4-ce46a12e6a7b",
  "meta": {
    "instanceId": "62fe1973b06b53c2a918f891d003328ecd43cc9389e3ac0f24384782e956f6ca"
  },
  "id": "dcXqlCtNnEcteAaj",
  "tags": []
}