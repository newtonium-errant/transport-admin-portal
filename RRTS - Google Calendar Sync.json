{
  "name": "RRTS - Google Calendar Sync",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1776,
        -80
      ],
      "id": "9f743674-926a-439e-9437-dff483d28813",
      "name": "Respond Sync Complete"
    },
    {
      "parameters": {
        "jsCode": "// Process Calendar Sync Results - v1.0.0\n// Processes Google Calendar API responses and updates appointment records\n\nconst results = $input.all();\nlet successCount = 0;\nlet errorCount = 0;\nconst errors = [];\n\nconsole.log(`=== PROCESSING CALENDAR SYNC RESULTS v1.0.0 ===`);\nconsole.log(`Total results: ${results.length}`);\n\nresults.forEach((result, index) => {\n    if (result.json && result.json.id) {\n        // Google Calendar event created successfully\n        successCount++;\n        console.log(`✅ Event ${index + 1}: Created successfully (${result.json.id})`);\n    } else {\n        // Error occurred\n        errorCount++;\n        errors.push({\n            index: index + 1,\n            error: result.json?.error || 'Unknown error',\n            details: result.json\n        });\n        console.log(`❌ Event ${index + 1}: Failed`);\n    }\n});\n\nconst driverId = results[0]?.json ? \n    results.find(r => r.json.extendedProperties)?.json.extendedProperties.private.rrts_driver_id || 'unknown' :\n    'unknown';\n\nconsole.log(`Sync completed: ${successCount} success, ${errorCount} errors`);\n\nreturn [{\n    json: {\n        success: errorCount === 0,\n        driverId: driverId,\n        message: `Calendar sync completed: ${successCount} events created, ${errorCount} errors`,\n        stats: {\n            totalEvents: results.length,\n            successful: successCount,\n            failed: errorCount\n        },\n        errors: errors.length > 0 ? errors : undefined,\n        timestamp: new Date().toISOString()\n    }\n}];\n\n// Version: v1.0.0 - Initial calendar sync result processing"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1568,
        -80
      ],
      "id": "26556b95-3028-4425-a0bc-860a6f194169",
      "name": "Process Sync Results - Code"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/calendar/v3/calendars/primary/events",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.accessToken }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.event }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1360,
        -80
      ],
      "id": "de048d57-ef23-4cc7-a440-71abca33d070",
      "name": "Create Calendar Event - HTTP"
    },
    {
      "parameters": {
        "jsCode": "// Prepare Google Calendar Events with Driver Token Check - v1.1.0\n// Gets driver info, validates tokens, and prepares calendar events\n\nconst webhookData = $('Calendar Sync Request - Webhook').first().json;\nconst driverInfo = $('Get Driver Info - Supabase').first().json;\nconst appointments = $input.all().map(item => item.json);\nconst driverId = webhookData.query.driverId || webhookData.body.driverId || '1';\n\nconsole.log(`=== PREPARING GOOGLE CALENDAR EVENTS v1.1.0 ===`);\nconsole.log(`Driver ID: ${driverId}`);\nconsole.log(`Driver: ${driverInfo.firstname} ${driverInfo.lastname}`);\nconsole.log(`Appointments to sync: ${appointments.length}`);\n\n// Check if driver calendar is connected\nif (!driverInfo.google_calendar_connected || !driverInfo.google_calendar_access_token) {\n    return [{\n        json: {\n            success: false,\n            error: 'Driver Google Calendar not connected',\n            driverId: driverId,\n            needsOAuth: true,\n            message: `Driver ${driverInfo.firstname} ${driverInfo.lastname} needs to connect Google Calendar first`\n        }\n    }];\n}\n\n// Convert appointments to Google Calendar event format\nconst calendarEvents = appointments.map((apt, index) => {\n    try {\n        // Build event times\n        const pickupTime = new Date(apt.pickuptime);\n        const appointmentTime = new Date(apt.appointmenttime);\n        const endTime = new Date(appointmentTime.getTime() + (30 * 60000)); // +30 min\n        \n        // Build client info\n        const clientName = apt.firstname && apt.lastname ? \n            `${apt.firstname} ${apt.lastname}` : 'Unknown Client';\n        \n        // Build event data\n        const event = {\n            summary: `Transport: ${clientName} to ${apt.locationname}`,\n            description: [\n                `Client: ${clientName} (${apt.knumber})`,\n                apt.phone ? `Phone: ${apt.phone}` : '',\n                `Pickup: ${pickupTime.toLocaleString('en-US', {\n                    timeZone: 'America/Halifax',\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    hour12: true\n                })}`,\n                `Appointment: ${appointmentTime.toLocaleString('en-US', {\n                    timeZone: 'America/Halifax',\n                    hour: 'numeric', \n                    minute: '2-digit',\n                    hour12: true\n                })}`,\n                apt.notes ? `Notes: ${apt.notes}` : '',\n                apt.scheduling_notes ? `Scheduling: ${apt.scheduling_notes}` : ''\n            ].filter(Boolean).join('\\n'),\n            start: {\n                dateTime: apt.pickuptime,\n                timeZone: 'America/Halifax'\n            },\n            end: {\n                dateTime: endTime.toISOString(),\n                timeZone: 'America/Halifax'\n            },\n            location: apt.locationaddress || apt.locationname,\n            colorId: '2', // Green for transportation\n            extendedProperties: {\n                private: {\n                    rrts_appointment_id: apt.id.toString(),\n                    rrts_knumber: apt.knumber,\n                    rrts_driver_id: driverId.toString()\n                }\n            },\n            reminders: {\n                useDefault: false,\n                overrides: [\n                    { method: 'popup', minutes: 15 },\n                    { method: 'popup', minutes: 5 }\n                ]\n            }\n        };\n        \n        console.log(`Prepared event ${index + 1}: ${event.summary}`);\n        \n        return {\n            json: {\n                appointmentId: apt.id,\n                event: event,\n                accessToken: driverInfo.google_calendar_access_token,\n                driverId: driverId,\n                action: 'create'\n            }\n        };\n    } catch (error) {\n        console.error(`Error preparing event ${index + 1}:`, error);\n        return {\n            json: {\n                error: `Failed to prepare event for appointment ${apt.id}`,\n                appointmentId: apt.id,\n                driverId: driverId\n            }\n        };\n    }\n});\n\nif (calendarEvents.length === 0) {\n    return [{\n        json: {\n            success: false,\n            error: 'No appointments found for this driver',\n            driverId: driverId,\n            message: `Driver ${driverInfo.firstname} ${driverInfo.lastname} has no appointments to sync`\n        }\n    }];\n}\n\nconsole.log(`✅ Prepared ${calendarEvents.length} events for Google Calendar`);\n\nreturn calendarEvents;\n\n// Version: v1.1.0 - Fixed node references and added proper error handling"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        -80
      ],
      "id": "459bcba3-d898-4a7a-b2fc-24e3a0544188",
      "name": "Prepare Calendar Events - Code"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "knumber",
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        944,
        -80
      ],
      "id": "9d804ea2-1783-48f0-b80a-fadcfdcae385",
      "name": "Merge Appointments with Clients"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "clients",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        736,
        32
      ],
      "id": "66f9d07a-a069-4dee-8dc8-79d0db35db05",
      "name": "Get Clients - Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "k2pl65iJIuBE5fj9",
          "name": "Supabase Service Role"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "appointments",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "driver_assigned",
              "condition": "eq",
              "keyValue": "={{ $('Calendar Sync Request - Webhook').first().json.query.driverId || $('Calendar Sync Request - Webhook').first().json.body.driverId || '1' }}"
            },
            {
              "keyName": "appointmentstatus",
              "condition": "neq",
              "keyValue": "cancelled"
            },
            {
              "keyName": "appointmenttime",
              "condition": "gte",
              "keyValue": "={{ $now }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        736,
        -176
      ],
      "id": "6bf400e2-3533-45e0-9d0a-3bb4d5f38a6b",
      "name": "Get Driver Appointments - Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "k2pl65iJIuBE5fj9",
          "name": "Supabase Service Role"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "drivers",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.query.driverId || $json.body.driverId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        496,
        -176
      ],
      "id": "79ce55b9-b204-4796-a8bf-e0fa16cb2d35",
      "name": "Get Driver Info - Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "k2pl65iJIuBE5fj9",
          "name": "Supabase Service Role"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sync-driver-calendar",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        288,
        -176
      ],
      "id": "0bdabbf7-5580-4142-936b-bb12110a5865",
      "name": "Calendar Sync Request - Webhook",
      "webhookId": "83b6fb37-49e8-4fe8-b920-918f34d662e5"
    }
  ],
  "pinData": {},
  "connections": {
    "Process Sync Results - Code": {
      "main": [
        [
          {
            "node": "Respond Sync Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Event - HTTP": {
      "main": [
        [
          {
            "node": "Process Sync Results - Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Calendar Events - Code": {
      "main": [
        [
          {
            "node": "Create Calendar Event - HTTP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Appointments with Clients": {
      "main": [
        [
          {
            "node": "Prepare Calendar Events - Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Clients - Supabase": {
      "main": [
        [
          {
            "node": "Merge Appointments with Clients",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Driver Appointments - Supabase": {
      "main": [
        [
          {
            "node": "Merge Appointments with Clients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Sync Request - Webhook": {
      "main": [
        [
          {
            "node": "Get Clients - Supabase",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Driver Info - Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Driver Info - Supabase": {
      "main": [
        [
          {
            "node": "Get Driver Appointments - Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7dcce1e0-b94b-40c6-a104-f6c7715a8329",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "62fe1973b06b53c2a918f891d003328ecd43cc9389e3ac0f24384782e956f6ca"
  },
  "id": "CuWPJ2XfdNdmZ0k8",
  "tags": [
    {
      "createdAt": "2025-09-02T13:35:21.928Z",
      "updatedAt": "2025-09-02T13:35:21.928Z",
      "id": "UAsZNo6GVGrVnSe0",
      "name": "Driver Management"
    }
  ]
}