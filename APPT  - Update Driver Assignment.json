{
  "name": "APPT  - Update Driver Assignment",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "update-driver-assignment",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "2018126a-72c7-43a9-b162-8b0a28f5e0a0",
      "name": "POST Update-Appointment - Webhook",
      "webhookId": "b36f1b42-20a5-420c-a6bc-aba842ad48a4"
    },
    {
      "parameters": {
        "jsCode": "// Driver Assignment Update - Only update fields that are actually changing - v1.0.0\nconst requestBody = $json.body || $json;\nconst appointmentId = requestBody.id;\n\nconsole.log('Received driver assignment update for ID:', appointmentId);\nconsole.log('Full request body:', JSON.stringify(requestBody, null, 2));\n\n// Validate required fields\nif (!appointmentId || appointmentId.trim() === '') {\n    return [{\n        json: {\n            success: false,\n            error: 'Appointment ID is required'\n        }\n    }];\n}\n\n// Helper function to handle empty strings for integer fields\nfunction parseIntegerField(value) {\n    if (value === \"\" || value === null || value === undefined) {\n        return null;\n    }\n    const parsed = parseInt(value);\n    return isNaN(parsed) ? null : parsed;\n}\n\n// ✅ DRIVER ASSIGNMENT UPDATE: Only include fields that are explicitly provided\nconst appointmentData = {\n    id: appointmentId\n};\n\n// Only add fields that are explicitly provided in the request\nif (requestBody.status !== undefined) {\n    appointmentData.appointmentstatus = requestBody.status;\n}\n\nif (requestBody.driver_assigned !== undefined) {\n    appointmentData.driver_assigned = parseIntegerField(requestBody.driver_assigned);\n}\n\n// Always update the timestamp when any field is updated\nappointmentData.appointmentStatusUpdated = new Date().toISOString();\n\nconsole.log('Driver assignment data to update:', JSON.stringify(appointmentData, null, 2));\n\nreturn [{\n    json: {\n        appointmentData: appointmentData,\n        success: true,\n        appointmentId: appointmentId,\n        fieldsToUpdate: Object.keys(appointmentData).filter(key => key !== 'id')\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        0
      ],
      "id": "7514c4ab-7822-4514-9d62-56d47372cd7a",
      "name": "Validate Input Data - Code"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "appointments",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.appointmentData.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "appointmentstatus",
              "fieldValue": "={{ $json.appointmentData.appointmentstatus }}"
            },
            {
              "fieldId": "driver_assigned",
              "fieldValue": "={{ $json.appointmentData.driver_assigned }}"
            },
            {
              "fieldId": "appointmentStatusUpdated",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        416,
        0
      ],
      "id": "8ee0806f-e047-48c1-aedd-c5dbf1b7ac02",
      "name": "Update Appointment - Supabase",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "k2pl65iJIuBE5fj9",
          "name": "Supabase Service Role"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format success response for appointment update - v1.7.0\nconst appointmentUpdate = $input.first().json;\n\nconsole.log('Supabase update response:', JSON.stringify(appointmentUpdate, null, 2));\n\n// Check if the update was successful\nif (!appointmentUpdate || appointmentUpdate.error) {\n    console.error('Update failed:', appointmentUpdate?.error);\n    return [{\n        json: {\n            success: false,\n            message: 'Failed to update appointment',\n            error: appointmentUpdate?.error || 'Update returned no data',\n            updatedAt: new Date().toISOString()\n        }\n    }];\n}\n\n// Success case\nconsole.log('Update successful for appointment ID:', appointmentUpdate.id);\nreturn [{\n    json: {\n        success: true,\n        message: 'Appointment updated successfully',\n        appointmentId: appointmentUpdate.id,\n        updatedAt: new Date().toISOString(),\n        updatedFields: {\n            appointmenttime: appointmentUpdate.appointmenttime,\n            pickuptime: appointmentUpdate.pickuptime,\n            dropOffTime: appointmentUpdate.dropOffTime,\n            appointmentLength: appointmentUpdate.this_appointment_length,  // ✅ ADD THIS FIELD\n            status: appointmentUpdate.appointmentstatus,\n            location: appointmentUpdate.locationname,\n            locationAddress: appointmentUpdate.locationaddress,\n            transittime: appointmentUpdate.transittime,\n            driver_assigned: appointmentUpdate.driver_assigned,\n            custom_rate: appointmentUpdate.custom_rate,\n            notes: appointmentUpdate.notes,\n            scheduling_notes: appointmentUpdate.scheduling_notes\n        }\n    }\n}];\n\n// Version: v1.7.0 - Added appointmentLength to success response\n// - v1.6.0: Added dropOffTime to success response\n// - v1.5.0: Enhanced error handling and response formatting\n// - v1.4.0: Added custom_rate field to response\n// - v1.3.0: Added location and locationAddress fields\n// - v1.2.0: Added scheduling_notes field\n// - v1.1.0: Added driver_assigned field\n// - v1.0.0: Initial success response formatting"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        0
      ],
      "id": "e007c30c-2dcc-4ddd-944b-c6460cb04403",
      "name": "Format Success Response - Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        832,
        0
      ],
      "id": "82af7078-6ced-4ee5-963d-020656cf50a1",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "POST Update-Appointment - Webhook": {
      "main": [
        [
          {
            "node": "Validate Input Data - Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input Data - Code": {
      "main": [
        [
          {
            "node": "Update Appointment - Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Appointment - Supabase": {
      "main": [
        [
          {
            "node": "Format Success Response - Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Response - Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "530a259e-923e-47cd-92b2-bd38e686f4c2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "62fe1973b06b53c2a918f891d003328ecd43cc9389e3ac0f24384782e956f6ca"
  },
  "id": "imw8X9F3pIIGKUYf",
  "tags": [
    {
      "createdAt": "2025-08-27T18:20:30.563Z",
      "updatedAt": "2025-08-27T18:20:30.563Z",
      "id": "J5OCr0g3hFvIP7Xh",
      "name": "Appointment Management"
    }
  ]
}